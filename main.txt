#include <iostream>
#include <fstream>
#include <string>

#include <stdio.h>

#include <GL/glew.h>
#include <GL/freeglut.h>

#include <glm/mat4x4.hpp>
#include <glm/gtx/transform.hpp>
#include <glm/gtc/type_ptr.hpp>

//varfurile triunghiului
float points[] = {
	0.0f,  0.5f,  0.0f, 0.0f,
	0.5f, -0.5f,  0.0f, 0.0f,
	-0.5f, -0.5f,  0.0f, 0.0f,

	0.0f,  0.5f,  0.0f, 1.0f,
	0.5f, -0.5f,  0.0f, 1.0f,
	-0.5f, -0.5f,  0.0f, 1.0f
};

GLuint shader_programme, vao;
glm::mat4 model;

std::string textFileRead(char *fn) 
{
	std::ifstream ifile(fn);
	std::string filetext;
	while (ifile.good()) {
		std::string line;
		std::getline(ifile, line);
		filetext.append(line + "\n");
	}
	return filetext;
}

void display()
{
	glClear(GL_COLOR_BUFFER_BIT);
	glUseProgram(shader_programme);

	float rotationAngle = glm::pi<float>() / 2;

	glm::mat4 rotationMatrix{  glm::cos(rotationAngle), -glm::sin(rotationAngle), 0, 0,
							  glm::sin(rotationAngle), glm::cos(rotationAngle), 0, 0,
								0,0,1,0, 
								0,0,0,1 
							};

	glm::mat4 translationMatrix{1, 0, 0, 0.5,
								0, 1, 0, -0.5,
								0, 0, 1, 0,
								0, 0, 0, 1							
	};

	glm::mat4 translationMatrix2{ 1, 0, 0, -0.5,
								0, 1, 0, 0,
								0, 0, 1, 0,
								0, 0, 0, 1
	};

	glm::mat4 finalMatrix2 = translationMatrix * rotationMatrix;
	glm::mat4 finalMatrix = translationMatrix2;

	GLuint matrixID = glGetUniformLocation(shader_programme, "modelMatrix");
	glUniformMatrix4fv(matrixID, 1, GL_TRUE, glm::value_ptr(finalMatrix));


	GLuint matrixID2 = glGetUniformLocation(shader_programme, "modelMatrix2");
	glUniformMatrix4fv(matrixID2, 1, GL_TRUE, glm::value_ptr(finalMatrix2));
	glBindVertexArray(vao);
	glDrawArrays(GL_TRIANGLES, 0, 3);
	glDrawArrays(GL_TRIANGLES, 3, 3);

	glFlush();
}

void init()
{
	// get version info
	const GLubyte* renderer = glGetString(GL_RENDERER); // get renderer string
	const GLubyte* version = glGetString(GL_VERSION); // version as a string
	printf("Renderer: %s\n", renderer);
	printf("OpenGL version supported %s\n", version);

	glClearColor(1, 1, 1, 0);

	glewInit();

	GLuint vbo = 1;
	glGenBuffers(1, &vbo);
	glBindBuffer(GL_ARRAY_BUFFER, vbo);
	glBufferData(GL_ARRAY_BUFFER,  24 * sizeof(float), points, GL_STATIC_DRAW);

	vao = 0;
	glGenVertexArrays(1, &vao);
	glBindVertexArray(vao);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, vbo);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 4 * sizeof(float), NULL);
	glVertexAttribPointer(1, 1, GL_FLOAT, GL_FALSE, 4*sizeof(float), (void*)(3 * sizeof(float)));

	std::string vstext = textFileRead("vertex.vert");
	std::string fstext = textFileRead("fragment.frag");
	const char* vertex_shader = vstext.c_str();
	const char* fragment_shader = fstext.c_str();

	GLuint vs = glCreateShader(GL_VERTEX_SHADER);
	glShaderSource(vs, 1, &vertex_shader, NULL);
	glCompileShader(vs);
	GLuint fs = glCreateShader(GL_FRAGMENT_SHADER);
	glShaderSource(fs, 1, &fragment_shader, NULL);
	glCompileShader(fs);

	shader_programme = glCreateProgram();
	glAttachShader(shader_programme, fs);
	glAttachShader(shader_programme, vs);
	glLinkProgram(shader_programme);
}

int main(int argc, char** argv)
{

	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);
	glutInitWindowPosition(200, 200);
	glutInitWindowSize(512, 512);
	glutCreateWindow("SPG");

	init();

	glutDisplayFunc(display);
	glutMainLoop();

	return 0;
}
